[general]
context = <%= if @node[:asterisk][:sip_conf_context] { @node[:asterisk][:sip_conf_context] } %>
allowguest = <%= @node[:asterisk][:sip_conf_allowguest] %>
allowoverlap = <%= @node[:asterisk][:sip_conf_allowoverlap] %>
allowtransfer = context = <%= @node[:asterisk][:sip_conf_allowtransfer] %>
real = context = <%= @node[:asterisk][:sip_conf_realm] %>
domain = <%= @node[:asterisk][:sip_conf_domain] %>
bindport = context = <%= @node[:asterisk][:sip_conf_bindport] %>
bindaddr = context = <%= @node[:asterisk][:sip_conf_bindaddr] %>
srvlookup = <%= @node[:asterisk][:sip_conf_srvlookup] %>
pedantic = <%= @node[:asterisk][:sip_conf_pedantic] %>
tos_sip = <%= @node[:asterisk][:sip_conf_tos_sip] %>
tos_audio = <%= @node[:asterisk][:sip_conf_tos_audio] %>
tos_video = <%= @node[:asterisk][:sip_conf_tos_video] %>
maxexpiry = <%= @node[:asterisk][:sip_conf_maxexpiry] %>
minexpirey = <%= @node[:asterisk][:sip_conf_minepxiry] %>
defaultexpiry = <%= @node[:asterisk][:sip_conf_defaultexpiry] %>
t1min = <%= @node[:asterisk][:sip_conf_t1min] %>
notifymimetype = <%= @node[:asterisk][:sip_conf_notifymimetype] %>
checkmwi = <%= @node[:asterisk][:sip_conf_checkmwi] %>
buggymwi = <%= @node[:asterisk][:sip_conf_buggymwi] %>
vmexten = <%= @node[:asterisk][:sip_conf_vmexten] %>
disallow = <%= @node[:asterisk][:sip_conf_disallow] %>

% @node[:asterisk][:sip_conf_allow].each do |allow|
	allow = <%= allow %>
% end

mohinterpret = <%= @node[:asterisk][:sip_conf_mohinterpret] %>
mohsuggest = <%= @node[:asterisk][:sip_conf_mohsuggest] %>
language = <%= @node[:asterisk][:sip_conf_lanugage] %>
relaxdtmf = <%= @node[:asterisk][:sip_conf_relaxdtmf] %>
trustpid = <%= @node[:asterisk][:sip_conf_trustpid] %>
sendrpid = <%= @node[:asterisk][:sip_conf_sendrpid] %>
progressinband = <%= @node[:asterisk][:sip_conf_progressinband] %>
useragent = <%= @node[:asterisk][:sip_conf_useragent] %>
promiscredir = <%= @node[:asterisk][:sip_conf_promiscredir] %>
usereqphone = <%= @node[:asterisk][:sip_conf_usereqphone] %>
dtmfmode = <%= @node[:asterisk][:sip_conf_dtmfmode] %>
compactheaders = <%= @node[:asterisk][:sip_conf_compactheaders] %>
videosupport = <%= @node[:asterisk][:sip_conf_videosupport] %>
maxcallbitrate = <%= @node[:asterisk][:sip_conf_maxcallbitrate] %>
callevents = <%= @node[:asterisk][:sip_conf_callevents] %>
alwaysauthreject = <%= @node[:asterisk][:sip_conf_alwaysauthreject] %>
g726nonstandard = <%= @node[:asterisk][:sip_conf_g726nonstandard] %>
matchexterniplocally = <%= @node[:asterisk][:sip_conf_matchexterniplocally] %>
regcontext = <%= @node[:asterisk][:sip_conf_regcontext] %>
rtptimeout = <%= @node[:asterisk][:sip_conf_rtptimeout] %>
rtpholdtimeout = <%= @node[:asterisk][:sip_conf_rtpholdtimeout] %>
rtpkeepalive = <%= @node[:asterisk][:sip_conf_rtpkeepalive] %>
sipdebug = <%= @node[:asterisk][:sip_conf_sipdebug] %>
recordhistory = <%= @node[:asterisk][:sip_conf_recordhistory] %>
dumphistory = <%= @node[:asterisk][:sip_conf_dumphistory] %>
allowsubscribe = <%= @node[:asterisk][:sip_conf_allowsubscribe] %>
subscribecontext = <%= @node[:asterisk][:sip_conf_subscribecontext] %>
notifyringing = <%= @node[:asterisk][:sip_conf_notifyringing] %>
notifyhold = <%= @node[:asterisk][:sip_conf_notifyhold] %>
limitonpeers = <%= @node[:asterisk][:sip_conf_limitonpeers] %>
t38pt_udptl = <%= @node[:asterisk][:sip_conf_t38pt_udptl] %>

;register => 1234:password@mysipprovider.com	
;
;     This will pass incoming calls to the 's' extension
;
;
;register => 2345:password@sip_proxy/1234
;
;    Register 2345 at sip provider 'sip_proxy'.  Calls from this provider
;    connect to local extension 1234 in extensions.conf, default context,
;    unless you configure a [sip_proxy] section below, and configure a
;    context.
;    Tip 1: Avoid assigning hostname to a sip.conf section like [provider.com]
;    Tip 2: Use separate type=peer and type=user sections for SIP providers
;           (instead of type=friend) if you have calls in both directions
  
;registertimeout=20		; retry registration calls every 20 seconds (default)
;registerattempts=10		; Number of registration attempts before we give up
				; 0 = continue forever, hammering the other server
				; until it accepts the registration
				; Default is 0 tries, continue forever

;----------------------------------------- NAT SUPPORT ------------------------
; The externip, externhost and localnet settings are used if you use Asterisk
; behind a NAT device to communicate with services on the outside.

externip = <%= @external_ip %>	; Address that we're going to put in outbound SIP
				                    ; messages if we're behind a NAT

				; The externip and localnet is used
				; when registering and communicating with other proxies
				; that we're registered with
;externhost=foo.dyndns.net	; Alternatively you can specify an 
				; external host, and Asterisk will 
				; perform DNS queries periodically.  Not
				; recommended for production 
				; environments!  Use externip instead
;externrefresh=10		; How often to refresh externhost if 
				; used
				; You may add multiple local networks.  A reasonable 
				; set of defaults are:
;localnet=192.168.0.0/255.255.0.0; All RFC 1918 addresses are local networks
;localnet=10.0.0.0/255.0.0.0	; Also RFC1918
;localnet=172.16.0.0/12		; Another RFC1918 with CIDR notation
;localnet=169.254.0.0/255.255.0.0 ;Zero conf local network

; The nat= setting is used when Asterisk is on a public IP, communicating with
; devices hidden behind a NAT device (broadband router).  If you have one-way
; audio problems, you usually have problems with your NAT configuration or your
; firewall's support of SIP+RTP ports.  You configure Asterisk choice of RTP
; ports for incoming audio in rtp.conf
;
;nat=no				; Global NAT settings  (Affects all peers and users)
                                ; yes = Always ignore info and assume NAT
                                ; no = Use NAT mode only according to RFC3581 (;rport)
                                ; never = Never attempt NAT mode or RFC3581 support
				; route = Assume NAT, don't send rport 
				; (work around more UNIDEN bugs)

;----------------------------------- MEDIA HANDLING --------------------------------
; By default, Asterisk tries to re-invite the audio to an optimal path. If there's
; no reason for Asterisk to stay in the media path, the media will be redirected.
; This does not really work with in the case where Asterisk is outside and have
; clients on the inside of a NAT. In that case, you want to set canreinvite=nonat
;
;canreinvite=yes		; Asterisk by default tries to redirect the
				; RTP media stream (audio) to go directly from
				; the caller to the callee.  Some devices do not
				; support this (especially if one of them is behind a NAT).
				; The default setting is YES. If you have all clients
				; behind a NAT, or for some other reason wants Asterisk to
				; stay in the audio path, you may want to turn this off.

				; In Asterisk 1.4 this setting also affect direct RTP
				; at call setup (a new feature in 1.4 - setting up the
				; call directly between the endpoints instead of sending
				; a re-INVITE).

;directrtpsetup=yes		; Enable the new experimental direct RTP setup. This sets up
				; the call directly with media peer-2-peer without re-invites.
				; Will not work for video and cases where the callee sends 
				; RTP payloads and fmtp headers in the 200 OK that does not match the
				; callers INVITE. This will also fail if canreinvite is enabled when
				; the device is actually behind NAT.

;canreinvite=nonat		; An additional option is to allow media path redirection
				; (reinvite) but only when the peer where the media is being
				; sent is known to not be behind a NAT (as the RTP core can
				; determine it based on the apparent IP address the media
				; arrives from).

;canreinvite=update		; Yet a third option... use UPDATE for media path redirection,
				; instead of INVITE. This can be combined with 'nonat', as
				; 'canreinvite=update,nonat'. It implies 'yes'.

;----------------------------------------- REALTIME SUPPORT ------------------------
; For additional information on ARA, the Asterisk Realtime Architecture,
; please read realtime.txt and extconfig.txt in the /doc directory of the
; source code.
;
;rtcachefriends=yes		; Cache realtime friends by adding them to the internal list
				; just like friends added from the config file only on a
				; as-needed basis? (yes|no)

;rtsavesysname=yes		; Save systemname in realtime database at registration
				; Default= no

;rtupdate=yes			; Send registry updates to database using realtime? (yes|no)
				; If set to yes, when a SIP UA registers successfully, the ip address,
				; the origination port, the registration period, and the username of
				; the UA will be set to database via realtime. 
				; If not present, defaults to 'yes'.
;rtautoclear=yes		; Auto-Expire friends created on the fly on the same schedule
				; as if it had just registered? (yes|no|<seconds>)
				; If set to yes, when the registration expires, the friend will
				; vanish from the configuration until requested again. If set
				; to an integer, friends expire within this number of seconds
				; instead of the registration interval.

;ignoreregexpire=yes		; Enabling this setting has two functions:
				;
				; For non-realtime peers, when their registration expires, the
				; information will _not_ be removed from memory or the Asterisk database
				; if you attempt to place a call to the peer, the existing information
				; will be used in spite of it having expired
				;
				; For realtime peers, when the peer is retrieved from realtime storage,
				; the registration information will be used regardless of whether
				; it has expired or not; if it expires while the realtime peer 
				; is still in memory (due to caching or other reasons), the 
				; information will not be removed from realtime storage

;----------------------------------------- SIP DOMAIN SUPPORT ------------------------
; Incoming INVITE and REFER messages can be matched against a list of 'allowed'
; domains, each of which can direct the call to a specific context if desired.
; By default, all domains are accepted and sent to the default context or the
; context associated with the user/peer placing the call.
; Domains can be specified using:
; domain=<domain>[,<context>]
; Examples:
; domain=myasterisk.dom
; domain=customer.com,customer-context
;
; In addition, all the 'default' domains associated with a server should be
; added if incoming request filtering is desired.
; autodomain=yes
;
; To disallow requests for domains not serviced by this server:
; allowexternaldomains=no

;domain=mydomain.tld,mydomain-incoming
				; Add domain and configure incoming context
				; for external calls to this domain
;domain=1.2.3.4			; Add IP address as local domain
				; You can have several "domain" settings
;allowexternaldomains=no	; Disable INVITE and REFER to non-local domains
				; Default is yes
;autodomain=yes			; Turn this on to have Asterisk add local host
				; name and local IP to domain list.

; fromdomain=mydomain.tld 	; When making outbound SIP INVITEs to
                          	; non-peers, use your primary domain "identity"
                          	; for From: headers instead of just your IP
                          	; address. This is to be polite and
                          	; it may be a mandatory requirement for some
                          	; destinations which do not have a prior
                          	; account relationship with your server. 

;------------------------------ JITTER BUFFER CONFIGURATION --------------------------
; jbenable = yes              ; Enables the use of a jitterbuffer on the receiving side of a
                              ; SIP channel. Defaults to "no". An enabled jitterbuffer will
                              ; be used only if the sending side can create and the receiving
                              ; side can not accept jitter. The SIP channel can accept jitter,
                              ; thus a jitterbuffer on the receive SIP side will be used only
                              ; if it is forced and enabled.

; jbforce = no                ; Forces the use of a jitterbuffer on the receive side of a SIP
                              ; channel. Defaults to "no".

; jbmaxsize = 200             ; Max length of the jitterbuffer in milliseconds.

; jbresyncthreshold = 1000    ; Jump in the frame timestamps over which the jitterbuffer is
                              ; resynchronized. Useful to improve the quality of the voice, with
                              ; big jumps in/broken timestamps, usually sent from exotic devices
                              ; and programs. Defaults to 1000.

; jbimpl = fixed              ; Jitterbuffer implementation, used on the receiving side of a SIP
                              ; channel. Two implementations are currently available - "fixed"
                              ; (with size always equals to jbmaxsize) and "adaptive" (with
                              ; variable size, actually the new jb of IAX2). Defaults to fixed.

; jblog = no                  ; Enables jitterbuffer frame logging. Defaults to "no".
;-----------------------------------------------------------------------------------

[authentication]
; Global credentials for outbound calls, i.e. when a proxy challenges your
; Asterisk server for authentication. These credentials override
; any credentials in peer/register definition if realm is matched.
;
; This way, Asterisk can authenticate for outbound calls to other
; realms. We match realm on the proxy challenge and pick an set of 
; credentials from this list
; Syntax:
;	auth = <user>:<secret>@<realm>
;	auth = <user>#<md5secret>@<realm>
; Example:
;auth=mark:topsecret@digium.com
; 
; You may also add auth= statements to [peer] definitions 
; Peer auth= override all other authentication settings if we match on realm

;------------------------------------------------------------------------------
; Users and peers have different settings available. Friends have all settings,
; since a friend is both a peer and a user
;
; User config options:        Peer configuration:
; --------------------        -------------------
; context                     context
; callingpres		      callingpres
; permit                      permit
; deny                        deny
; secret                      secret
; md5secret                   md5secret
; dtmfmode                    dtmfmode
; canreinvite                 canreinvite
; nat                         nat
; callgroup                   callgroup
; pickupgroup                 pickupgroup
; language                    language
; allow                       allow
; disallow                    disallow
; insecure                    insecure
; trustrpid                   trustrpid
; progressinband              progressinband
; promiscredir                promiscredir
; useclientcode               useclientcode
; accountcode                 accountcode
; setvar                      setvar
; callerid		      callerid
; amaflags		      amaflags
; call-limit		      call-limit
; allowoverlap		      allowoverlap
; allowsubscribe	      allowsubscribe
; allowtransfer	      	      allowtransfer
; subscribecontext	      subscribecontext
; videosupport		      videosupport
; maxcallbitrate	      maxcallbitrate
; rfc2833compensate           mailbox
; t38pt_usertpsource          username
;                             template
;                             fromdomain
;                             regexten
;                             fromuser
;                             host
;                             port
;                             qualify
;                             defaultip
;                             rtptimeout
;                             rtpholdtimeout
;                             sendrpid
;                             outboundproxy
;                             rfc2833compensate
;                             t38pt_usertpsource

;[sip_proxy]
; For incoming calls only. Example: FWD (Free World Dialup)
; We match on IP address of the proxy for incoming calls 
; since we can not match on username (caller id)
;type=peer
;context=from-fwd
;host=fwd.pulver.com

;[sip_proxy-out]
;type=peer          			; we only want to call out, not be called
;secret=guessit
;username=yourusername			; Authentication user for outbound proxies
;fromuser=yourusername			; Many SIP providers require this!
;fromdomain=provider.sip.domain	
;host=box.provider.com
;usereqphone=yes			; This provider requires ";user=phone" on URI
;call-limit=5				; permit only 5 simultaneous outgoing calls to this peer
;outboundproxy=proxy.provider.domain	; send outbound signaling to this proxy, not directly to the peer
					; Call-limits will not be enforced on real-time peers,
					; since they are not stored in-memory
;port=80				; The port number we want to connect to on the remote side
					; Also used as "defaultport" in combination with "defaultip" settings

;[cisco1]
;type=friend
;secret=blah
;qualify=200			; Qualify peer is no more than 200ms away
;nat=yes			; This phone may be natted
				; Send SIP and RTP to the IP address that packet is 
				; received from instead of trusting SIP headers 
;host=dynamic			; This device registers with us
;canreinvite=no			; Asterisk by default tries to redirect the
				; RTP media stream (audio) to go directly from
				; the caller to the callee.  Some devices do not
				; support this (especially if one of them is 
				; behind a NAT).
;defaultip=192.168.0.4		; IP address to use until registration
;username=goran			; Username to use when calling this device before registration
				; Normally you do NOT need to set this parameter
;setvar=CUSTID=5678		; Channel variable to be set for all calls from this device
